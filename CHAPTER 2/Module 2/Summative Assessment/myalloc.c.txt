#include "mymalloc.h"
#include <stdio.h>

// Memory array
char memory[20000];

// Pointer to the start of the free list
struct block *freeList = (void*)memory;

// Function to initialize memory
void initialize() {
    freeList->size = 20000 - sizeof(struct block);
    freeList->free = 1;  // Mark the whole memory block as free
    freeList->next = NULL;
}

// Function to split a large block into smaller pieces
void split(struct block *fitting_slot, size_t size) {
    struct block *newBlock = (void*)((void*)fitting_slot + size + sizeof(struct block));
    newBlock->size = (fitting_slot->size) - size - sizeof(struct block);
    newBlock->free = 1;
    newBlock->next = fitting_slot->next;
    fitting_slot->size = size;
    fitting_slot->free = 0;
    fitting_slot->next = newBlock;
}

// Function to merge adjacent free blocks
void merge() {
    struct block *curr = freeList;
    while (curr && curr->next) {
        if (curr->free && curr->next->free) {
            curr->size += curr->next->size + sizeof(struct block);
            curr->next = curr->next->next;
        }
        curr = curr->next;
    }
}

// MyMalloc implementation
void *MyMalloc(size_t noOfBytes) {
    struct block *curr;
    void *result = NULL;

    // Check if memory is initialized
    if (!(freeList->size)) {
        initialize();
        printf("Memory initialized\n");
    }

    curr = freeList;
    while (curr != NULL) {
        if (curr->free && curr->size >= noOfBytes) {
            // If block is exactly the same size
            if (curr->size == noOfBytes) {
                curr->free = 0;
                result = (void*)(++curr);
                printf("Exact fitting block allocated\n");
                return result;
            }
            // If block is larger, split the block
            else if (curr->size > noOfBytes) {
                split(curr, noOfBytes);
                result = (void*)(++curr);
                printf("Fitting block split and allocated\n");
                return result;
            }
        }
        curr = curr->next;
    }

    // No sufficient memory
    printf("Sorry. No sufficient memory to allocate.\n");
    return NULL;
}

// MyFree implementation
void MyFree(void* ptr) {
    if ((void*)memory <= ptr && ptr <= (void*)(memory + 20000)) {
        struct block* curr = ptr;
        --curr;  // Move to the block metadata
        curr->free = 1;
        printf("Block freed\n");
        merge();  // Merge adjacent free blocks
    } else {
        printf("Please provide a valid allocated pointer\n");
    }
}
